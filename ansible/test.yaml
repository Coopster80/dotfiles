---
- hosts: server
  tasks:
    - name: Install python3-pip
      become: true
      apt:
        name: python3-pip
        state: present

    - name: Install openshift python module
      pip:
        name: openshift

    - name: Install microk8s
      snap:
        name: microk8s
        classic: true

    - name: Add user to microk8s group
      user:
        name: "{{ ansible_user }}"
        groups: microk8s
        append: true

    - name: Wait for microk8s to be ready
      command: microk8s status --wait-ready --timeout 1800
      changed_when: false

    - name: Allow packet forwarding
      become: true
      iptables:
        chain: FORWARD
        policy: ACCEPT

    - name: Install iptables-persistent
      become: true
      apt:
        name: iptables-persistent
        state: present

    - name: Enable microk8s addons
      command: microk8s enable {{ item }}
      register: addon_result
      changed_when: addon_result.stdout is not search("is already enabled.")
      loop:
        - dns
        - storage
        - ingress
        - helm3

    - name: Install kubectl
      snap:
        name: kubectl
        classic: true

    - name: Create kubeconfig directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: "0755"

    - name: Set owner of kubeconfig directory to {{ ansible_user }}
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        recurse: true

    - name: Generate kubeconfig file
      command: microk8s config
      register: kubeconfig
      changed_when: false

    - name: Save kubeconfig file
      copy:
        content: "{{ kubeconfig.stdout }}"
        dest: "{{ ansible_env.HOME }}/.kube/config"

    - name: Set kubeconfig file permissions
      file:
        path: "{{ ansible_env.HOME }}/.kube/config"
        mode: "0600"

    - name: Install helm
      snap:
        name: helm
        classic: true

    - name: Create cert-manager namespace
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: cert-manager
